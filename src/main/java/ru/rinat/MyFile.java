package ru.rinat;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Objects;

public class MyFile {
    public static void listDirectory(String path) throws MyException {
        File directoryPath = new File(path);
        if (directoryPath.exists() && directoryPath.isDirectory()) {
            Arrays.stream(Objects.requireNonNull(directoryPath.listFiles()))
                    .map(elem -> elem.getName() + " ").forEach(System.out::print);
        } else {
            throw new MyException("Error: Wrong path");
        }
        System.out.println();
    }

    public static void listPythonFiles(String path) throws MyException {
        File directoryPath = new File(path);
        if (directoryPath.exists() && directoryPath.isDirectory()) {
            Arrays.stream(Objects.requireNonNull(directoryPath.listFiles()))
                    .filter(elem -> elem.getName().endsWith(".py"))
                    .map(elem -> elem.getName() + " ").forEach(System.out::print);
        } else {
            throw new MyException("Error: Wrong path");
        }
        System.out.println();
    }

    public static void isDirectory(String path) throws MyException {
        File directoryPath = new File(path);
        if (directoryPath.exists()) {
            if (directoryPath.isDirectory()) {
                System.out.println("true");
            } else if (directoryPath.isFile()) {
                System.out.println("false");
            }
        } else {
            throw new MyException("Error: Wrong path");
        }
    }

    public static void define(String path) throws MyException {
        File directoryPath = new File(path);
        if (directoryPath.exists()) {
            if (directoryPath.isDirectory()) {
                System.out.println("directory");
            } else if (directoryPath.isFile()) {
                System.out.println("file");
            }
        } else {
            throw new MyException("Error: Wrong path");
        }
    }

    public static void printPermissions(String path) throws MyException {
        File directoryPath = new File(path);
        if (directoryPath.exists()) {
            System.out.print(directoryPath.canRead() ? "r" : "-");
            System.out.print(directoryPath.canWrite() ? "w" : "-");
            System.out.print(directoryPath.canExecute() ? "x" : "-");
            System.out.println();
        } else {
            throw new MyException("Error: Wrong path");
        }
    }

    public static void setPermissions(String path, String permissions) throws MyException {
        try {
            Utils.validatePermissions(permissions);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
            return;
        }
        File directoryPath = new File(path);
        if (directoryPath.exists()) {
            directoryPath.setReadable(permissions.charAt(0) == 'r');
            directoryPath.setWritable(permissions.charAt(1) == 'w');
            directoryPath.setExecutable(permissions.charAt(2) == 'x');
        } else {
            throw new MyException("Error: Wrong path");
        }
    }

    public static void printContent(String path) throws MyException {
        File file = new File(path);
        if (file.exists() && file.isFile()) {
            String content = Utils.readFile(file);
            if (content != null) {
                System.out.println(content);
            }
        } else {
            throw new MyException("Error: Wrong path");
        }
    }

    public static void appendFooter(String path) throws MyException {
        File file = new File(path);
        if (file.exists() && file.isFile()) {
            try (FileWriter writer = new FileWriter(file, true)) {
                writer.write("\n# Autogenerated line");
            } catch (IOException e) {
                System.out.println("Error: Failed to append to file");
            }
        } else {
            throw new MyException("Error: Wrong path");
        }
    }

    public static void createBackup(String path) throws MyException {
        File directoryPath = new File(path);
        if (directoryPath.exists()) {
            String date = Utils.getDate();
            String backupPath = "/tmp/" + date + ".backup";
            File backupDirectory = new File(backupPath);
            if (!backupDirectory.exists()) {
                backupDirectory.mkdir();
            }
            if (directoryPath.isDirectory()) {
                Utils.copyDirectory(directoryPath, backupDirectory);
            } else if (directoryPath.isFile()) {
                Utils.copyFile(directoryPath, backupDirectory);
            }
        } else {
            throw new MyException("Error: Wrong path");
        }
    }

    public static void printLongestWord(String path) throws MyException {
        File file = new File(path);
        if (file.exists() && file.isFile()) {
            String content = Utils.readFile(file);
            if (content != null) {
                String[] words = content.split("\\s+");
                int maxLength = 0;
                String longestWord = "";
                for (String word : words) {
                    if (word.length() > maxLength) {
                        maxLength = word.length();
                        longestWord = word;
                    }
                }
                System.out.println(longestWord);
            }
        } else {
            throw new MyException("Error: Wrong path");
        }
    }

    public static void help() {
        System.out.println(
                "MyFS 1.0 команды:\n" +
                        "ls <path>               выводит список всех файлов и директорий для `path`\n" +
                        "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
                        "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
                        "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
                        "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
                        "setmod <path> <perm>    устанавливает права для файла `path`\n" +
                        "cat <path>              выводит контент файла\n" +
                        "append <path>           добавляет строку `# Autogenerated line` в конец файла `path`\n" +
                        "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
                        "greplong <path>         выводит самое длинное слово в файле\n" +
                        "help                    выводит список команд и их описание\n" +
                        "exit                    завершает работу программы"
        );
    }
}
